{"version":"1.0","docs":[{"type":"class","desc":"Super class for all components\r","code":"","props":[{"desc":" All the properties for this component","name":"props","types":["Object"]},{"desc":" If true the component won't update once mounted","name":"isPure","types":["Boolean"]}],"name":"Component","super":"Quas","funcs":[{"type":"function","desc":"","code":"","params":[{"desc":" All the properties for this component","name":"props","types":["Object"]}],"return":[],"name":"constructor","isStatic":false},{"type":"function","desc":"Sets the properties and updates the component\r","code":"myComp.setProps({\r\n  name : \"john\",\r\n  id : 123\r\n});\r","params":[{"desc":" The properties to change or add","name":"props","types":["Object"]}],"return":[],"name":"setProps","isStatic":false},{"type":"function","desc":"Returns true if this component has been mounted to the DOM tree\r","code":"console.log(comp.isMounted()); //false;\r\nQuas.render(comp, \"#app\");\r\nconsole.log(comp.isMounted()); //true\r","params":[],"return":["Boolean"],"name":"isMounted","isStatic":false},{"type":"function","desc":"","code":"","params":[],"return":[],"name":"unmount","isStatic":false}]},{"type":"class","desc":"Super class for all components\r","code":"","props":[],"name":"Quas","super":"","funcs":[{"type":"function","desc":"Mounts a component to the DOM tree\r","code":"//mount using the query selector (#id, .class, tag)\r\nQuas.render(myComp, \"#app\");\r\n\n//mount using a DOM Element\r\nlet el = document.querySelector(\"#app\");\r\nQuas.render(myComp, el);\r","params":[{"desc":" component to mount","name":"component","types":["Component"]},{"desc":" the parent node","name":"parent","types":["String","DOMElement"]}],"return":[],"name":"render","isStatic":true},{"type":"function","desc":"","code":"","params":[{"desc":" description of the element","name":"vdom","types":["Array"]},{"desc":" the component of the vdom","name":"component","types":["Object"]}],"return":["DOMElement"],"name":"createDOM","isStatic":true},{"type":"function","desc":"An asynchronous HTTP request (AJAX)\r\n\nformat of request object:\r\nurl : \"myfile.php\",\r\ntype : \"GET|POST\",\r\ndata : {\r\n  key : \"value\"\r\n},\r\nreturn : \"json|xml\",\r\nsuccess : (result)=>{},\r\nerror : (Error) => {}\r","code":"//most basic use to log the contents of a file\r\nQuas.ajax({\r\n  url : \"/myfile.txt\",\r\n  success : (result) => {\r\n    console.log(result);\r\n  }\r\n});\r\n\n//requesting and displaying a json file\r\nQuas.ajax({\r\n  url : \"/myfile.json\",\r\n  type : \"GET\", //GET is the default request type\r\n  return : \"json\", //return type\r\n  success : (data) => { //callback\r\n    //data is a json object\r\n    for(let i in data){\r\n      console.log(data[i]);\r\n    }\r\n  },\r\n  error : (err) => { //error callback\r\n    console.error(err);\r\n  }\r\n});\r\n\n//post request example for loading an article by id\r\nQuas.ajax({\r\n  url : \"/findArticle.php\",\r\n  type : \"POST\",\r\n  data : {\r\n    articleID : \"1234\"\r\n  },\r\n  return : \"json\", //return type\r\n  success : (data) => { //callback\r\n    console.log(data.author);\r\n    console.log(data.text);\r\n  },\r\n  error : (err) => { //error callback\r\n    console.error(err);\r\n  }\r\n});\r","params":[{"desc":" request data","name":"requestData","types":["OBJECT"]}],"return":[],"name":"ajax","isStatic":true},{"type":"function","desc":"fetch a resouce asynchronously, similar to Quas.ajax but it uses the fetch api with a promise\r\nif the file fails to load, it will throw an error\r","code":"// Request data format, Default options are marked with *\r\n{\r\n  body: JSON.stringify(data), // must match 'Content-Type' header\r\n  cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n  credentials: 'same-origin', // include, same-origin, *omit\r\n  headers: {\r\n    'user-agent': 'Mozilla/4.0 MDN Example',\r\n    'content-type': 'application/json'\r\n  },\r\n  method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n  mode: 'cors', // no-cors, cors, *same-origin\r\n  redirect: 'follow', // manual, *follow, error\r\n  referrer: 'no-referrer', // *client, no-referrer\r\n}\r\n\n//fetch and log a text file\r\nQuas.fetch(\"/myfile.txt\")\r\n  .then((result) = >{\r\n    console.log(\"myfile.txt:\" + result);\r\n  })\r\n  .catch((err) => console.error(err));\r\n\n//fetch a json file\r\nQuas.fetch(\"/myfile.json\", \"json\")\r\n  .then((data) =>{\r\n    console.log(\"key count: \" + Object.keys(data).length);\r\n  })\r\n  .catch((err) => console.error(err));\r","params":[{"desc":" url to the resource","name":"url","types":["String"]},{"optional":true,"desc":"text, json, blob, buff","name":"type","types":["String"]},{"optional":true,"desc":"data for the request","name":"reqestData","types":["Object"]}],"return":[],"name":"fetch","isStatic":true},{"type":"function","desc":"Returns an object with the browser info:\r\nname - browser name,\r\nversion - browser version,\r\nisMobile - true if a mobile browser\r\n\nNote: the isMobile variable might not be 100% accurate\r","code":"","params":[],"return":["OBJECT"],"name":"getBrowserInfo","isStatic":true},{"type":"function","desc":"Returns the data from the url in as an object\r\nExample:\r\n  www.mysite.com/home?key=val&foo=bar => {key : \"val\", foo : \"bar\"}\r","code":"","params":[],"return":["OBJECT"],"name":"getUrlValues","isStatic":true},{"type":"function","desc":"Set or change variables in the url\r\nIf the value == \"\" then the value is removed form the url\r\nBy default the page won't reload the page unless the reload parameter is set to true\r\n\nNote: values will be encoded so they are allowed to have spaces\r","code":"//url: /home\r\n\nQuas.setUrlValues({\r\n  name:\"john\"\r\n});\r\n//urL: /home?name=john\r\n\nQuas.setUrlValues({\r\n  name:\"\"\r\n});\r\n//urL: /home\r\n\nQuas.setUrlValues({\r\n  search :\"the mouse\"\r\n});\r\n//url: /home?search=the%20mouse\r","params":[{"desc":" new url values","name":"values","types":["OBJECT"]},{"optional":true,"desc":"","name":"reload","types":["Boolean"]}],"return":[],"name":"setUrlValues","isStatic":true},{"type":"function","desc":"Returns a cookie value by key\r","code":"let token = Quas.getCookie(\"token\");\r\nconsole.log(token);\r","params":[{"name":"key","types":["String"]}],"return":["String"],"name":"getCookie","isStatic":true},{"type":"function","desc":"Sets a cookie\r","code":"","params":[{"name":"key","types":["String"]},{"name":"value","types":["String"]},{"optional":true,"desc":"default is 12hrs from now","name":"date","types":["Date"]},{"optional":true,"desc":"default is \"/\"","name":"path","types":["String"]}],"return":[],"name":"setCookie","isStatic":true},{"type":"function","desc":"Removes a cookie by key\r","code":"","params":[{"name":"key","types":["String"]}],"return":[],"name":"clearCookie","isStatic":true},{"type":"function","desc":"returns true if using the router module\r","code":"","params":[],"return":["Boolean"],"name":"hasRouter","isStatic":true}]}]}

{"docs":[{"type":"module","desc":"Asyncronously loading files\r\n\nadds custom attribute for \"q-async\" which currently just loads images\r","code":"    <img q-async-imgsrc=\"/images/1.png\"></img>\r\n  </div>\r","props":[],"name":"Async","funcs":[]},{"type":"module","desc":"Managing cookies\r","code":"","props":[],"name":"Cookie","funcs":[{"type":"function","desc":"Returns a cookie value by key\r","code":"let token = Quas.getCookie(\"token\");\r\nconsole.log(token);\r","params":[{"desc":"","name":"key","types":["String"]}],"return":["String"],"name":"get","isStatic":true},{"type":"function","desc":"Sets a cookie\r","code":"","params":[{"desc":"","name":"key","types":["String"]},{"desc":"","name":"value","types":["String"]},{"optional":true,"desc":"default is 12hrs from now","name":"date","types":["Date"]},{"optional":true,"desc":"default is \"/\"","name":"path","types":["String"]}],"return":[],"name":"set","isStatic":true},{"type":"function","desc":"Removes a cookie by key\r","code":"","params":[{"desc":"","name":"key","types":["String"]}],"return":[],"name":"clear","isStatic":true}]},{"type":"module","desc":"Handling of the mapping and changes on the page for a single page web app\r","code":"","props":[{"desc":" all of the mapped routes","name":"routes","types":["Array<Object>"]},{"desc":" all of the aliases","name":"aliases","types":["Array<Object>"]},{"desc":" all of the redirects","name":"redirects","types":["Array<Object>"]},{"desc":" all of the current instances of component","name":"comps","types":["Array<Object>"]},{"desc":" the current route being displayed","name":"currentRoute","types":["Object"]}],"name":"Router","funcs":[{"type":"function","desc":"maps a route and sets the fullpath key for all the child routes\r","code":"Router.map({\r\n  path : \"/home\",\r\n  id : \"home\", //(optional) must be unique\r\n  title : \"Home\", //(optional)\r\n\n  //(optional) all of the components this route uses\r\n  comps : [\r\n    {\r\n      comp : Navbar, //name of class\r\n      props : {\r\n        options : [\"item 1, item 2\"]\r\n      }\r\n    }\r\n  ],\r\n  children : [], //(optional) child routes\r\n  meta : [ //(optional) meta data\r\n    {\r\n      name : \"title\",\r\n      content : \"My Title\"\r\n    },\r\n    {\r\n      name : \"description\",\r\n      content : \"my description\"\r\n    },\r\n  ]\r\n});\r","params":[{"desc":" data for this route","name":"routeData","types":["Object"]}],"return":[],"name":"map","isStatic":true},{"type":"function","desc":"Assigns the route for when a page is not found, known as a 404 error\r","code":"","params":[{"desc":" 404 route data","name":"route","types":["Object"]}],"return":[],"name":"setRoute404","isStatic":true},{"type":"function","desc":"Converts a path using the params\r","code":"//returns: /profile/john\r\nRouter.convertToDynamicPath(\"/profile/:user\", {user:\"john\"});\r\n\n//returns: /about\r\nRouter.convertToDynamicPath(\"/about\", {user:\"john\"});\r\n\n//returns: /about\r\nRouter.convertToDynamicPath(\"/about\", {});\r","params":[{"desc":" A static or dynamic path","name":"path","types":["String"]},{"desc":" The parameters to pass to the path","name":"params","types":["Object"]}],"return":["Object"],"name":"convertToDynamicPath","isStatic":true},{"type":"function","desc":"loads the route based on the current url\r","code":"","params":[],"return":[],"name":"load","isStatic":true},{"type":"function","desc":"Sets the document meta data, using the data from routes\r","code":"Router.setMetaData([\r\n  {\r\n    name : \"title\",\r\n    content : \"My Title\"\r\n  },\r\n  {\r\n    prop : \"og:title\",\r\n    content : \"My Title\"\r\n  }\r\n]);\r\n\n//results in:\r\n// <meta name=\"title\" content=\"My Title\">\r\n// <meta property=\"og:title\" content=\"My Title\">\r","params":[{"desc":" The data to set","name":"metaData","types":["Array<Object>"]}],"return":[],"name":"setMetaData","isStatic":true},{"type":"function","desc":"Adds a route alias, which will load the \"to\" page but without changing the url\r","code":"// \"/other\" will load \"/home\"\r\nRouter.addAlias({\r\n  from : \"/other\",\r\n  to : \"/home\"\r\n});\r\n\n// \"/p/1234\" will load \"/post/1234\"\r\nRouter.addAlias({\r\n  from : \"/p/:id\",\r\n  to : \"/post/:id\"\r\n});\r","params":[{"desc":" the to and from data","name":"alias","types":["Object"]}],"return":[],"name":"addAlias","isStatic":true},{"type":"function","desc":"Adds a route redirect, which will load the \"to\" page and changes the url\r","code":"// \"/oldPage\" sets the url to \"/home\"\r\n// and also loads \"/home\"\r\nRouter.addRedirect({\r\n  from : \"/oldPage\",\r\n  to : \"/home\"\r\n});\r\n\n// \"/p/1234\" sets the url to \"/post/1234\"\r\n// and also loads \"/post/1234\"\r\nRouter.addAlias({\r\n  from : \"/p/:id\",\r\n  to : \"/post/:id\"\r\n});\r","params":[{"desc":" the to and from data","name":"redirect","types":["String"]}],"return":[],"name":"addRedirect","isStatic":true},{"type":"function","desc":"Finds and returns the routeInfo with the matching id. The routeInfo is a read only verison of the route data with every key except children and comps\r","code":"let homeRouteInfo = Router.getRouteInfoByID(\"home\");\r\nconsole.log(homeRouteInfo.fullpath);\r","params":[{"desc":" route id","name":"id","types":["String"]}],"return":["Object","undefined"],"name":"getRouteInfoByID","isStatic":true},{"type":"function","desc":"Finds and returns the routeInfo with the matching id. The routeInfo is a read only verison of the route data with every key except children and comps\r","code":"let homeRouteInfo = Router.getRouteInfoByPath(\"/home\");\r","params":[],"return":[],"name":"getRouteInfoByPath","isStatic":true},{"type":"function","desc":"Push a route by id. By pushing it will load Router matching route\r","code":"","params":[{"desc":" Route ID","name":"routeID","types":["String"]},{"desc":" Route parameters","name":"params","types":["Object"]}],"return":[],"name":"pushByID","isStatic":true}]},{"type":"module","desc":"Handling markdown\r","code":"","props":[],"name":"Markdown","funcs":[{"type":"function","desc":"Parses markdown text and returns a virtual dom\r","code":"","params":[{"desc":" plain text","name":"text","types":["String"]}],"return":["Array<AST>"],"name":"parseToVDOM","isStatic":true}]},{"type":"module","desc":"Handles scroll events and actions\r","code":"","props":[],"name":"Scroll","funcs":[{"type":"function","desc":"scrolls on Y-Axis to the top of the element with a matching id to the url hash. If no element is found with a matching ID nothing will happen\r\n\nNote:\r\nThe dom must by mounted to find it, so make sure you call this function after rendering your component.\r\nIf you are using the Router module you must also call this in onAfterPush( )\r","code":"","params":[{"desc":" offset from the top of the element","name":"offsetY","types":["Number"]}],"return":[],"name":"toHash","isStatic":true}]},{"type":"class","desc":"Super class for all components\r","code":"","props":[{"desc":" All the properties for this component","name":"props","types":["Object"]},{"desc":" If true the component won't update once mounted","name":"isPure","types":["Boolean"]},{"desc":" Root Element","name":"dom","types":["Element"]},{"desc":" Virtual dom for this component","name":"vdom","types":["AST"]}],"name":"Component","super":"","funcs":[{"type":"function","desc":"","code":"","params":[{"desc":" All the properties for this component","name":"props","types":["Object"]}],"return":[],"name":"constructor","isStatic":false},{"type":"function","desc":"Sets the properties and updates the component\r","code":"myComp.setProps({\r\n  name : \"john\",\r\n  id : 123\r\n});\r","params":[{"desc":" The properties to change or add","name":"props","types":["Object"]}],"return":[],"name":"setProps","isStatic":false},{"type":"function","desc":"Returns true if this component has been mounted to the DOM tree\r","code":"console.log(comp.isMounted()); //false;\r\nQuas.render(comp, \"#app\");\r\nconsole.log(comp.isMounted()); //true\r","params":[],"return":["Boolean"],"name":"isMounted","isStatic":false},{"type":"function","desc":"","code":"","params":[],"return":[],"name":"unmount","isStatic":false}]},{"type":"class","desc":"Main Library\r","code":"","props":[{"desc":" all of the imported modules","name":"modules","types":["Object"]},{"desc":" the registered custom attributes","name":"customAttrs","types":["Array<Object>"]}],"name":"Quas","super":"","funcs":[{"type":"function","desc":"Mounts a component to the DOM tree, however if the Component is already mounted it will update the component\r","code":"//mount using the query selector (#id, .class, tag)\r\nQuas.render(myComp, \"#app\");\r\n\n//alternatively mount using a DOM Element\r\nlet el = document.querySelector(\"#app\");\r\nQuas.render(myComp, el);\r\n\n//update the component\r\nQuas.render(myComp);\r","params":[{"desc":" component to mount","name":"component","types":["Component"]},{"desc":" the parent node","name":"parent","types":["String","Element"]}],"return":[],"name":"render","isStatic":true},{"type":"function","desc":"Creates a DOM Element using the vdom and adds it as a child to the parent.\r\nWhen called the parent parameter should be undefined\r","code":"Quas.createElement(vdom, comp);\r","params":[{"desc":" description of the element","name":"vdom","types":["AST"]},{"desc":" the component of the vdom","name":"component","types":["Component"]}],"return":["Element","String"],"name":"createElement","isStatic":true},{"type":"function","desc":"An asynchronous HTTP request (AJAX)\r\n\nformat of request object:\r\n{\r\n  url : \"myfile.php\",\r\n  type : \"GET|POST\",\r\n  data : {\r\n    key : \"value\"\r\n  },\r\n  return : \"json|xml\",\r\n  success : (result)=>{},\r\n  error : (Error) => {}\r\n}\r","code":"//most basic use to log the contents of a file\r\nQuas.ajax({\r\n  url : \"/myfile.txt\",\r\n  success : (result) => {\r\n    console.log(result);\r\n  }\r\n});\r\n\n//requesting and displaying a json file\r\nQuas.ajax({\r\n  url : \"/myfile.json\",\r\n  type : \"GET\", //GET is the default request type\r\n  return : \"json\", //return type\r\n  success : (data) => { //callback\r\n    //data is a json object\r\n    for(let i in data){\r\n      console.log(data[i]);\r\n    }\r\n  },\r\n  error : (err) => { //error callback\r\n    console.error(err);\r\n  }\r\n});\r\n\n//post request example for loading an article by id\r\nQuas.ajax({\r\n  url : \"/findArticle.php\",\r\n  type : \"POST\",\r\n  data : {\r\n    articleID : \"1234\"\r\n  },\r\n  return : \"json\", //return type\r\n  success : (data) => { //callback\r\n    console.log(data.author);\r\n    console.log(data.text);\r\n  },\r\n  error : (err) => { //error callback\r\n    console.error(err);\r\n  }\r\n});\r","params":[{"desc":" request data","name":"requestData","types":["Object"]}],"return":[],"name":"ajax","isStatic":true},{"type":"function","desc":"fetch a resouce asynchronously, similar to Quas.ajax but it uses the fetch api with a promise\r\nif the file fails to load, it will throw an error\r","code":"// Request data format, Default options are marked with *\r\n{\r\n  body: JSON.stringify(data), // must match 'Content-Type' header\r\n  cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n  credentials: 'same-origin', // include, same-origin, *omit\r\n  headers: {\r\n    'user-agent': 'Mozilla/4.0 MDN Example',\r\n    'content-type': 'application/json'\r\n  },\r\n  method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n  mode: 'cors', // no-cors, cors, *same-origin\r\n  redirect: 'follow', // manual, *follow, error\r\n  referrer: 'no-referrer', // *client, no-referrer\r\n}\r\n\n//fetch and log a text file\r\nQuas.fetch(\"/myfile.txt\")\r\n  .then((result) = >{\r\n    console.log(\"myfile.txt:\" + result);\r\n  })\r\n  .catch((err) => console.error(err));\r\n\n//fetch a json file\r\nQuas.fetch(\"/myfile.json\", \"json\")\r\n  .then((data) =>{\r\n    console.log(\"key count: \" + Object.keys(data).length);\r\n  })\r\n  .catch((err) => console.error(err));\r","params":[{"desc":" url to the resource","name":"url","types":["String"]},{"optional":true,"desc":"text, json, blob, buffer","name":"type","types":["String"]},{"optional":true,"desc":"data for the request","name":"requestData","types":["Object"]}],"return":[],"name":"fetch","isStatic":true},{"type":"function","desc":"Returns an object with the browser info:\r\n  - name : browser name,\r\n  - version : browser version,\r\n  - isMobile : true if a mobile browser\r\n\nNote: the isMobile variable might not be 100% accurate\r","code":"","params":[],"return":["Object"],"name":"getBrowserInfo","isStatic":true},{"type":"function","desc":"Returns the data from the url in as an object, it will also decode the URI\r","code":"// url: /home?key=val&foo=bar\r\n// => {key : \"val\", foo : \"bar\"}\r","params":[],"return":["Object"],"name":"getUrlValues","isStatic":true},{"type":"function","desc":"Set or change variables in the url\r\nIf the value == \"\" then the value is removed form the url\r\nBy default the page won't reload the page unless the reload parameter is set to true\r\n\nNote: values will be encoded so they are allowed to have spaces\r","code":"//url: /home\r\nQuas.setUrlValues({\r\n  name:\"john\"\r\n});\r\n//updated: /home?name=john\r\n\nQuas.setUrlValues({\r\n  name:\"\"\r\n});\r\n//updated: /home\r\n\nQuas.setUrlValues({\r\n  search :\"the mouse\"\r\n});\r\n//updated: /home?search=the%20mouse\r","params":[{"desc":" new url values","name":"values","types":["Object"]},{"optional":true,"desc":"","name":"reload","types":["Boolean"]}],"return":[],"name":"setUrlValues","isStatic":true},{"type":"function","desc":"Returns true if using the router module\r","code":"","params":[],"return":["Boolean"],"name":"hasModule","isStatic":true}]}],"version":"1.0"}
